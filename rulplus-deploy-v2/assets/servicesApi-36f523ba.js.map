{"version":3,"file":"servicesApi-36f523ba.js","sources":["../../src/shared/api/servicesApi.ts"],"sourcesContent":["// API для управления услугами автошколы\r\n\r\nexport interface IMainService {\r\n  id: number;\r\n  category: string;\r\n  name: string;\r\n  description: string;\r\n  duration: string;\r\n  cost: number;\r\n  includes: string[];\r\n  additionalCosts: {\r\n    service: string;\r\n    cost: string;\r\n    note: string;\r\n  }[];\r\n}\r\n\r\nexport interface IAdditionalService {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  cost: number;\r\n  unit: string;\r\n  note: string;\r\n}\r\n\r\nexport interface IPaymentMethod {\r\n  id: number;\r\n  method: string;\r\n}\r\n\r\nexport interface IPaymentSchedule {\r\n  id: number;\r\n  stage: string;\r\n  amount: string;\r\n  note: string;\r\n}\r\n\r\nexport interface IDiscount {\r\n  id: number;\r\n  category: string;\r\n  discount: string;\r\n  note: string;\r\n}\r\n\r\nexport interface IContractInfo {\r\n  templateUrl: string;\r\n  requiredDocuments: string[];\r\n}\r\n\r\nexport interface IServicesData {\r\n  mainServices: IMainService[];\r\n  additionalServices: IAdditionalService[];\r\n  paymentTerms: {\r\n    methods: IPaymentMethod[];\r\n    schedule: IPaymentSchedule[];\r\n    discounts: IDiscount[];\r\n  };\r\n  contractInfo: IContractInfo;\r\n}\r\n\r\n// API клиент для услуг\r\nexport const servicesApi = {\r\n  // Получить все данные об услугах\r\n  getServices: async (): Promise<IServicesData> => {\r\n    try {\r\n      const response = await fetch('/api/services');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при загрузке услуг:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Создать новую основную услугу\r\n  createMainService: async (service: Omit<IMainService, 'id'>): Promise<IMainService> => {\r\n    try {\r\n      const response = await fetch('/api/services/main', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(service),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при создании основной услуги:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Обновить основную услугу\r\n  updateMainService: async (id: number, service: Partial<IMainService>): Promise<IMainService> => {\r\n    try {\r\n      const response = await fetch(`/api/services/main/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(service),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при обновлении основной услуги:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Удалить основную услугу\r\n  deleteMainService: async (id: number): Promise<void> => {\r\n    try {\r\n      const response = await fetch(`/api/services/main/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при удалении основной услуги:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Создать дополнительную услугу\r\n  createAdditionalService: async (service: Omit<IAdditionalService, 'id'>): Promise<IAdditionalService> => {\r\n    try {\r\n      const response = await fetch('/api/services/additional', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(service),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при создании дополнительной услуги:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Обновить дополнительную услугу\r\n  updateAdditionalService: async (id: number, service: Partial<IAdditionalService>): Promise<IAdditionalService> => {\r\n    try {\r\n      const response = await fetch(`/api/services/additional/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(service),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при обновлении дополнительной услуги:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Удалить дополнительную услугу\r\n  deleteAdditionalService: async (id: number): Promise<void> => {\r\n    try {\r\n      const response = await fetch(`/api/services/additional/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при удалении дополнительной услуги:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Обновить способы оплаты\r\n  updatePaymentMethods: async (methods: IPaymentMethod[]): Promise<IPaymentMethod[]> => {\r\n    try {\r\n      const response = await fetch('/api/services/payment-methods', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(methods),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при обновлении способов оплаты:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Обновить график оплаты\r\n  updatePaymentSchedule: async (schedule: IPaymentSchedule[]): Promise<IPaymentSchedule[]> => {\r\n    try {\r\n      const response = await fetch('/api/services/payment-schedule', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(schedule),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при обновлении графика оплаты:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Обновить скидки\r\n  updateDiscounts: async (discounts: IDiscount[]): Promise<IDiscount[]> => {\r\n    try {\r\n      const response = await fetch('/api/services/discounts', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(discounts),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при обновлении скидок:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Обновить информацию о договоре\r\n  updateContractInfo: async (contractInfo: IContractInfo): Promise<IContractInfo> => {\r\n    try {\r\n      const response = await fetch('/api/services/contract-info', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(contractInfo),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Ошибка при обновлении информации о договоре:', error);\r\n      throw error;\r\n    }\r\n  },\r\n}; "],"names":["servicesApi","response","error","service","id","methods","schedule","discounts","contractInfo"],"mappings":"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"}
{"version":3,"file":"index-eb188ac3.js","sources":["../../src/pages/AdminPanel/Settings/index.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  Alert,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  InputAdornment,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport {\r\n  Settings,\r\n  ArrowBack,\r\n  Save,\r\n  RestoreFromTrash,\r\n  Security,\r\n  Notifications,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Lock,\r\n} from '@mui/icons-material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst SystemSettings = () => {\r\n  const navigate = useNavigate();\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [saveMessage, setSaveMessage] = useState('');\r\n  const [passwordChangeMessage, setPasswordChangeMessage] = useState('');\r\n  \r\n  // Состояние для изменения пароля\r\n  const [passwordDialogOpen, setPasswordDialogOpen] = useState(false);\r\n  const [passwordData, setPasswordData] = useState({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: ''\r\n  });\r\n  const [showPasswords, setShowPasswords] = useState({\r\n    current: false,\r\n    new: false,\r\n    confirm: false\r\n  });\r\n  const [passwordError, setPasswordError] = useState('');\r\n  \r\n  // Основные настройки\r\n  const [generalSettings, setGeneralSettings] = useState({\r\n    schoolName: 'РУЛЬ+',\r\n    slogan: 'СЕЛ — ПОЕХАЛ',\r\n    address: 'г. Назрань, ул. Московская, 123',\r\n    phone: '+79286970697',\r\n    email: 'info@rulplus.ru',\r\n    website: 'https://rulplus.ru',\r\n    workingHours: '9:00 - 18:00',\r\n    timezone: 'Europe/Moscow'\r\n  });\r\n\r\n  // Настройки уведомлений\r\n  const [notificationSettings, setNotificationSettings] = useState({\r\n    emailNotifications: true,\r\n    smsNotifications: false,\r\n    pushNotifications: true,\r\n    examReminders: true,\r\n    paymentReminders: true,\r\n    maintenanceAlerts: true\r\n  });\r\n\r\n  // Настройки безопасности\r\n  const [securitySettings, setSecuritySettings] = useState({\r\n    sessionTimeout: 30,\r\n    passwordMinLength: 8,\r\n    requireSpecialChars: true,\r\n    twoFactorAuth: false,\r\n    loginAttempts: 5,\r\n    ipWhitelist: false\r\n  });\r\n\r\n  // Настройки курсов\r\n  const [courseSettings, setCourseSettings] = useState({\r\n    theoryHours: 40,\r\n    practiceHours: 20,\r\n    examAttempts: 3,\r\n    certificateValidityDays: 365,\r\n    minAge: 18,\r\n    maxStudentsPerInstructor: 15\r\n  });\r\n\r\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    // Здесь будет логика сохранения настроек\r\n    setSaveMessage('Настройки успешно сохранены!');\r\n    setTimeout(() => setSaveMessage(''), 3000);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    // Логика сброса настроек к значениям по умолчанию\r\n    if (window.confirm('Вы уверены, что хотите сбросить все настройки к значениям по умолчанию?')) {\r\n      setSaveMessage('Настройки сброшены к значениям по умолчанию');\r\n      setTimeout(() => setSaveMessage(''), 3000);\r\n    }\r\n  };\r\n\r\n  // Функции для изменения пароля\r\n  const handlePasswordChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPasswordData(prev => ({\r\n      ...prev,\r\n      [field]: event.target.value\r\n    }));\r\n    setPasswordError('');\r\n  };\r\n\r\n  const togglePasswordVisibility = (field: 'current' | 'new' | 'confirm') => {\r\n    setShowPasswords(prev => ({\r\n      ...prev,\r\n      [field]: !prev[field]\r\n    }));\r\n  };\r\n\r\n  const handleChangePassword = async () => {\r\n    setPasswordError('');\r\n    \r\n    // Валидация\r\n    if (!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword) {\r\n      setPasswordError('Все поля должны быть заполнены');\r\n      return;\r\n    }\r\n\r\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\r\n      setPasswordError('Новые пароли не совпадают');\r\n      return;\r\n    }\r\n\r\n    if (passwordData.newPassword.length < securitySettings.passwordMinLength) {\r\n      setPasswordError(`Пароль должен содержать минимум ${securitySettings.passwordMinLength} символов`);\r\n      return;\r\n    }\r\n\r\n    if (securitySettings.requireSpecialChars && !/[!@#$%^&*(),.?\":{}|<>]/.test(passwordData.newPassword)) {\r\n      setPasswordError('Пароль должен содержать специальные символы');\r\n      return;\r\n    }\r\n\r\n    // Проверка текущего пароля (в реальном приложении это будет API запрос)\r\n    if (passwordData.currentPassword !== 'rulplus2024') {\r\n      setPasswordError('Неверный текущий пароль');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Симуляция API запроса\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // В реальном приложении здесь будет обновление пароля в базе данных\r\n      setPasswordChangeMessage('Пароль успешно изменен!');\r\n      setPasswordDialogOpen(false);\r\n      setPasswordData({\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n      });\r\n      \r\n      setTimeout(() => setPasswordChangeMessage(''), 3000);\r\n    } catch (error) {\r\n      setPasswordError('Ошибка при изменении пароля. Попробуйте снова.');\r\n    }\r\n  };\r\n\r\n  const handleClosePasswordDialog = () => {\r\n    setPasswordDialogOpen(false);\r\n    setPasswordData({\r\n      currentPassword: '',\r\n      newPassword: '',\r\n      confirmPassword: ''\r\n    });\r\n    setPasswordError('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Настройки системы - РУЛЬ+ Админ</title>\r\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\r\n      </Helmet>\r\n\r\n      <Container maxWidth=\"xl\" sx={{ py: 4 }}>\r\n        {/* Заголовок */}\r\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 4 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <Button\r\n              startIcon={<ArrowBack />}\r\n              onClick={() => navigate('/admin')}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              Назад\r\n            </Button>\r\n            <Settings sx={{ mr: 2, fontSize: 32, color: 'primary.main' }} />\r\n            <Box>\r\n              <Typography variant=\"h4\" component=\"h1\" fontWeight=\"bold\">\r\n                Настройки системы\r\n              </Typography>\r\n              <Typography variant=\"body1\" color=\"text.secondary\">\r\n                Конфигурация и управление системой автошколы\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Box>\r\n            <Button\r\n              variant=\"outlined\"\r\n              startIcon={<RestoreFromTrash />}\r\n              onClick={handleReset}\r\n              sx={{ mr: 2 }}\r\n            >\r\n              Сбросить\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Save />}\r\n              onClick={handleSave}\r\n            >\r\n              Сохранить\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Уведомление о сохранении */}\r\n        {saveMessage && (\r\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n            {saveMessage}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Уведомление об изменении пароля */}\r\n        {passwordChangeMessage && (\r\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n            {passwordChangeMessage}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Вкладки */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\r\n          <Tabs value={tabValue} onChange={handleTabChange}>\r\n            <Tab label=\"Общие\" />\r\n            <Tab label=\"Уведомления\" />\r\n            <Tab label=\"Безопасность\" />\r\n            <Tab label=\"Курсы\" />\r\n            <Tab label=\"Интеграции\" />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* Общие настройки */}\r\n        {tabValue === 0 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Основная информация\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Название автошколы\"\r\n                        value={generalSettings.schoolName}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, schoolName: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Слоган\"\r\n                        value={generalSettings.slogan}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, slogan: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Адрес\"\r\n                        multiline\r\n                        rows={2}\r\n                        value={generalSettings.address}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, address: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Телефон\"\r\n                        value={generalSettings.phone}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, phone: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        value={generalSettings.email}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, email: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Рабочие параметры\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Веб-сайт\"\r\n                        value={generalSettings.website}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, website: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Рабочие часы\"\r\n                        value={generalSettings.workingHours}\r\n                        onChange={(e) => setGeneralSettings({...generalSettings, workingHours: e.target.value})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <FormControl fullWidth>\r\n                        <InputLabel>Часовой пояс</InputLabel>\r\n                        <Select\r\n                          value={generalSettings.timezone}\r\n                          label=\"Часовой пояс\"\r\n                          onChange={(e) => setGeneralSettings({...generalSettings, timezone: e.target.value})}\r\n                        >\r\n                          <MenuItem value=\"Europe/Moscow\">Москва (GMT+3)</MenuItem>\r\n                          <MenuItem value=\"Europe/Samara\">Самара (GMT+4)</MenuItem>\r\n                          <MenuItem value=\"Asia/Yekaterinburg\">Екатеринбург (GMT+5)</MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Настройки уведомлений */}\r\n        {tabValue === 1 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    <Notifications sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n                    Типы уведомлений\r\n                  </Typography>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Email уведомления\" secondary=\"Отправка писем на электронную почту\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={notificationSettings.emailNotifications}\r\n                          onChange={(e) => setNotificationSettings({...notificationSettings, emailNotifications: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"SMS уведомления\" secondary=\"Отправка SMS сообщений\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={notificationSettings.smsNotifications}\r\n                          onChange={(e) => setNotificationSettings({...notificationSettings, smsNotifications: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Push уведомления\" secondary=\"Уведомления в браузере\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={notificationSettings.pushNotifications}\r\n                          onChange={(e) => setNotificationSettings({...notificationSettings, pushNotifications: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    События для уведомлений\r\n                  </Typography>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Напоминания об экзаменах\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={notificationSettings.examReminders}\r\n                          onChange={(e) => setNotificationSettings({...notificationSettings, examReminders: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Напоминания об оплате\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={notificationSettings.paymentReminders}\r\n                          onChange={(e) => setNotificationSettings({...notificationSettings, paymentReminders: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Уведомления о ТО автомобилей\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={notificationSettings.maintenanceAlerts}\r\n                          onChange={(e) => setNotificationSettings({...notificationSettings, maintenanceAlerts: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Настройки безопасности */}\r\n        {tabValue === 2 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    <Security sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n                    Политики безопасности\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Время сессии (минуты)\"\r\n                        type=\"number\"\r\n                        value={securitySettings.sessionTimeout}\r\n                        onChange={(e) => setSecuritySettings({...securitySettings, sessionTimeout: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Минимальная длина пароля\"\r\n                        type=\"number\"\r\n                        value={securitySettings.passwordMinLength}\r\n                        onChange={(e) => setSecuritySettings({...securitySettings, passwordMinLength: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Максимум попыток входа\"\r\n                        type=\"number\"\r\n                        value={securitySettings.loginAttempts}\r\n                        onChange={(e) => setSecuritySettings({...securitySettings, loginAttempts: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Дополнительная защита\r\n                  </Typography>\r\n                  <List>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Требовать специальные символы в пароле\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={securitySettings.requireSpecialChars}\r\n                          onChange={(e) => setSecuritySettings({...securitySettings, requireSpecialChars: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Двухфакторная аутентификация\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={securitySettings.twoFactorAuth}\r\n                          onChange={(e) => setSecuritySettings({...securitySettings, twoFactorAuth: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemText primary=\"Белый список IP адресов\" />\r\n                      <ListItemSecondaryAction>\r\n                        <Switch\r\n                          checked={securitySettings.ipWhitelist}\r\n                          onChange={(e) => setSecuritySettings({...securitySettings, ipWhitelist: e.target.checked})}\r\n                        />\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  </List>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            {/* Кнопка изменения пароля */}\r\n            <Grid item xs={12}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                    <Box>\r\n                      <Typography variant=\"h6\" gutterBottom>\r\n                        <Lock sx={{ mr: 1, verticalAlign: 'middle' }} />\r\n                        Изменение пароля администратора\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Измените пароль для входа в админ-панель. Рекомендуется использовать сложный пароль.\r\n                      </Typography>\r\n                    </Box>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      startIcon={<Lock />}\r\n                      onClick={() => setPasswordDialogOpen(true)}\r\n                      sx={{ minWidth: 200 }}\r\n                    >\r\n                      Изменить пароль\r\n                    </Button>\r\n                  </Box>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Настройки курсов */}\r\n        {tabValue === 3 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Параметры обучения\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Часы теории\"\r\n                        type=\"number\"\r\n                        value={courseSettings.theoryHours}\r\n                        onChange={(e) => setCourseSettings({...courseSettings, theoryHours: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Часы практики\"\r\n                        type=\"number\"\r\n                        value={courseSettings.practiceHours}\r\n                        onChange={(e) => setCourseSettings({...courseSettings, practiceHours: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Попытки сдачи экзамена\"\r\n                        type=\"number\"\r\n                        value={courseSettings.examAttempts}\r\n                        onChange={(e) => setCourseSettings({...courseSettings, examAttempts: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Минимальный возраст\"\r\n                        type=\"number\"\r\n                        value={courseSettings.minAge}\r\n                        onChange={(e) => setCourseSettings({...courseSettings, minAge: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Ограничения и сроки\r\n                  </Typography>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Срок действия справки (дни)\"\r\n                        type=\"number\"\r\n                        value={courseSettings.certificateValidityDays}\r\n                        onChange={(e) => setCourseSettings({...courseSettings, certificateValidityDays: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <TextField\r\n                        fullWidth\r\n                        label=\"Макс. студентов на инструктора\"\r\n                        type=\"number\"\r\n                        value={courseSettings.maxStudentsPerInstructor}\r\n                        onChange={(e) => setCourseSettings({...courseSettings, maxStudentsPerInstructor: parseInt(e.target.value)})}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {/* Интеграции */}\r\n        {tabValue === 4 && (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\" gutterBottom>\r\n                    Внешние интеграции\r\n                  </Typography>\r\n                  <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n                    Здесь можно настроить интеграции с внешними сервисами: платежные системы, SMS-сервисы, \r\n                    электронная отчетность и др.\r\n                  </Alert>\r\n                  <Typography variant=\"body1\" color=\"text.secondary\">\r\n                    Функционал интеграций будет добавлен в следующих версиях системы.\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Container>\r\n\r\n      {/* Диалог изменения пароля */}\r\n      <Dialog open={passwordDialogOpen} onClose={handleClosePasswordDialog}>\r\n        <DialogTitle>Изменение пароля администратора</DialogTitle>\r\n        <DialogContent>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Текущий пароль\"\r\n                type={showPasswords.current ? 'text' : 'password'}\r\n                value={passwordData.currentPassword}\r\n                onChange={handlePasswordChange('currentPassword')}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => togglePasswordVisibility('current')} edge=\"end\">\r\n                        {showPasswords.current ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Новый пароль\"\r\n                type={showPasswords.new ? 'text' : 'password'}\r\n                value={passwordData.newPassword}\r\n                onChange={handlePasswordChange('newPassword')}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => togglePasswordVisibility('new')} edge=\"end\">\r\n                        {showPasswords.new ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Подтверждение нового пароля\"\r\n                type={showPasswords.confirm ? 'text' : 'password'}\r\n                value={passwordData.confirmPassword}\r\n                onChange={handlePasswordChange('confirmPassword')}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton onClick={() => togglePasswordVisibility('confirm')} edge=\"end\">\r\n                        {showPasswords.confirm ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n              />\r\n            </Grid>\r\n            {passwordError && (\r\n              <Grid item xs={12}>\r\n                <Alert severity=\"error\" sx={{ mt: 2 }}>{passwordError}</Alert>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClosePasswordDialog} color=\"primary\">\r\n            Отмена\r\n          </Button>\r\n          <Button onClick={handleChangePassword} variant=\"contained\" color=\"primary\">\r\n            Изменить пароль\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SystemSettings; "],"names":["SystemSettings","navigate","useNavigate","tabValue","setTabValue","useState","saveMessage","setSaveMessage","passwordChangeMessage","setPasswordChangeMessage","passwordDialogOpen","setPasswordDialogOpen","passwordData","setPasswordData","showPasswords","setShowPasswords","passwordError","setPasswordError","generalSettings","setGeneralSettings","notificationSettings","setNotificationSettings","securitySettings","setSecuritySettings","courseSettings","setCourseSettings","handleTabChange","event","newValue","handleSave","handleReset","handlePasswordChange","field","prev","togglePasswordVisibility","handleChangePassword","resolve","handleClosePasswordDialog","jsxs","Fragment","Helmet","jsx","Container","Box","Button","ArrowBack","Settings","Typography","RestoreFromTrash","Save","Alert","Tabs","Tab","Grid","Card","CardContent","TextField","e","FormControl","InputLabel","Select","MenuItem","Notifications","List","ListItem","ListItemText","ListItemSecondaryAction","Switch","Security","Lock","Dialog","DialogTitle","DialogContent","InputAdornment","IconButton","VisibilityOff","Visibility","DialogActions"],"mappings":"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"}
// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –†–£–õ–¨+
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø–æ–ª–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ API
const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api';
const FILES_BASE_URL = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:5000';

export interface Document {
  id: string;
  title: string;
  description: string;
  category: string;
  fileUrl?: string;
  fileName?: string;
  fileSize?: string;
  uploadDate: string;
  lastUpdate: string;
  expiryDate?: string;
  status: 'active' | 'expired' | 'not_required';
}

export interface DocumentsData {
  charter: Document[];
  license: Document[];
  accreditation: Document[];
  regulations: Document[];
  reports: Document[];
  collective: Document[];
  prescriptions: Document[];
  lastUpdated?: string;
  [key: string]: Document[] | string | undefined;
}

export interface DocumentsResponse {
  status: string;
  data: DocumentsData;
  message?: string;
}

export interface ApiResponse<T> {
  status: string;
  data?: T;
  message?: string;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
const handleApiError = (error: any, defaultMessage: string): never => {
  console.error('API Error:', error);
  if (error.response) {
    throw new Error(error.response.data?.message || defaultMessage);
  }
  throw new Error(error.message || defaultMessage);
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
export { handleApiError };

export const documentsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
  getDocuments: async (): Promise<DocumentsResponse> => {
    try {
      const response = await fetch(`${API_BASE_URL}/documents`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data: DocumentsResponse = await response.json();
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getDocumentsByCategory: async (category: string): Promise<{ status: string; data: Document[]; message: string }> => {
    try {
      const response = await fetch(`${API_BASE_URL}/documents/category/${category}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID
  getDocumentById: async (id: string): Promise<{ status: string; data: Document; message: string }> => {
    try {
      console.log('üîç getDocumentById –≤—ã–∑–≤–∞–Ω —Å ID:', id);
      console.log('üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', new Error().stack?.split('\n').slice(0, 5).join('\n'));

      const response = await fetch(`${API_BASE_URL}/documents/${id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ getDocumentById –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getDocumentById:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
  createDocument: async (documentData: {
    title: string;
    description: string;
    category: string;
    status?: string;
    expiryDate?: string;
    file?: File;
  }): Promise<{ status: string; data: Document; message: string }> => {
    try {
      const formData = new FormData();

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      formData.append('title', documentData.title);
      formData.append('description', documentData.description);
      formData.append('category', documentData.category);
      if (documentData.status) formData.append('status', documentData.status);
      if (documentData.expiryDate) formData.append('expiryDate', documentData.expiryDate);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (documentData.file) {
        formData.append('file', documentData.file);
      }

      const response = await fetch(`${API_BASE_URL}/documents`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
  updateDocument: async (id: string, documentData: {
    title?: string;
    description?: string;
    category?: string;
    status?: string;
    expiryDate?: string;
    file?: File;
  }): Promise<{ status: string; data: Document; message: string }> => {
    try {
      const formData = new FormData();

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      if (documentData.title !== undefined) formData.append('title', documentData.title);
      if (documentData.description !== undefined) formData.append('description', documentData.description);
      if (documentData.category !== undefined) formData.append('category', documentData.category);
      if (documentData.status !== undefined) formData.append('status', documentData.status);
      if (documentData.expiryDate !== undefined) {
        formData.append('expiryDate', documentData.expiryDate || '');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (documentData.file) {
        formData.append('file', documentData.file);
      }

      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:');
      console.log('üìã ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:', id);
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', Object.fromEntries(formData.entries()));

      const response = await fetch(`${API_BASE_URL}/documents/${id}`, {
        method: 'PUT',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
  deleteDocument: async (id: string): Promise<{ status: string; message: string }> => {
    try {
      const response = await fetch(`${API_BASE_URL}/documents/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  },

  // –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  searchDocuments: async (query: string): Promise<{ status: string; data: Document[]; message: string }> => {
    try {
      const response = await fetch(`${API_BASE_URL}/documents/search/${encodeURIComponent(query)}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  getDocumentStats: async (): Promise<{ status: string; data: any; message: string }> => {
    try {
      const response = await fetch(`${API_BASE_URL}/documents/stats/overview`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  // –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
  downloadDocument: (fileUrl: string, fileName: string) => {
    try {
      console.log('üì• downloadDocument –≤—ã–∑–≤–∞–Ω —Å fileUrl:', fileUrl);
      const link = document.createElement('a');
      // –§–∞–π–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä /documents/
      const fullUrl = fileUrl.startsWith('http') ? fileUrl : `${FILES_BASE_URL}${fileUrl}`;
      console.log('üì• –ò—Ç–æ–≥–æ–≤—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', fullUrl);
      link.href = fullUrl;
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
    }
  },

  // –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
  viewDocument: (fileUrl: string): Promise<void> => {
    return new Promise<void>((resolve, reject) => {
      try {
        console.log('üëÅÔ∏è viewDocument –≤—ã–∑–≤–∞–Ω —Å fileUrl:', fileUrl);
        // –§–∞–π–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä /documents/
        const fullUrl = fileUrl.startsWith('http') ? fileUrl : `${FILES_BASE_URL}${fileUrl}`;
        console.log('üëÅÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', fullUrl);

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        fetch(fullUrl, { method: 'HEAD' })
          .then(response => {
            if (!response.ok) {
              throw new Error(`–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
            }

            // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            const newWindow = window.open(fullUrl, '_blank', 'noopener,noreferrer');

            // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
            if (!newWindow || newWindow.closed || typeof newWindow.closed === 'undefined') {
              console.log('‚ö†Ô∏è –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ');
              // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ª—É—á—à–µ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              if (confirm('–ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤. –û—Ç–∫—Ä—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ?')) {
                window.location.href = fullUrl;
              }
            } else {
              console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ');
            }

            resolve();
          })
          .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞:', error);
            reject(new Error('–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'));
          });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'));
      }
    });
  }
}; 
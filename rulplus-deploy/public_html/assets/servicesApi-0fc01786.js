const e={getServices:async()=>{try{const r=await fetch("http://localhost:5000/api/services");if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);return await r.json()}catch(r){throw console.error("Ошибка при загрузке услуг:",r),r}},createMainService:async r=>{try{const t=await fetch("http://localhost:5000/api/services/main",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw console.error("Ошибка при создании основной услуги:",t),t}},updateMainService:async(r,t)=>{try{const o=await fetch(`http://localhost:5000/api/services/main/${r}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return await o.json()}catch(o){throw console.error("Ошибка при обновлении основной услуги:",o),o}},deleteMainService:async r=>{try{const t=await fetch(`http://localhost:5000/api/services/main/${r}`,{method:"DELETE"});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`)}catch(t){throw console.error("Ошибка при удалении основной услуги:",t),t}},createAdditionalService:async r=>{try{const t=await fetch("http://localhost:5000/api/services/additional",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw console.error("Ошибка при создании дополнительной услуги:",t),t}},updateAdditionalService:async(r,t)=>{try{const o=await fetch(`http://localhost:5000/api/services/additional/${r}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return await o.json()}catch(o){throw console.error("Ошибка при обновлении дополнительной услуги:",o),o}},deleteAdditionalService:async r=>{try{const t=await fetch(`http://localhost:5000/api/services/additional/${r}`,{method:"DELETE"});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`)}catch(t){throw console.error("Ошибка при удалении дополнительной услуги:",t),t}},updatePaymentMethods:async r=>{try{const t=await fetch("http://localhost:5000/api/services/payment-methods",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw console.error("Ошибка при обновлении способов оплаты:",t),t}},updatePaymentSchedule:async r=>{try{const t=await fetch("http://localhost:5000/api/services/payment-schedule",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw console.error("Ошибка при обновлении графика оплаты:",t),t}},updateDiscounts:async r=>{try{const t=await fetch("http://localhost:5000/api/services/discounts",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw console.error("Ошибка при обновлении скидок:",t),t}},updateContractInfo:async r=>{try{const t=await fetch("http://localhost:5000/api/services/contract-info",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw console.error("Ошибка при обновлении информации о договоре:",t),t}}};export{e as s};
//# sourceMappingURL=servicesApi-0fc01786.js.map

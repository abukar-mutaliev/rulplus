import nodemailer from 'nodemailer';

// Email configuration –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã
const createTransporter = () => {
  return nodemailer.createTransport({
    host: 'smtp.yandex.ru',
    port: 465,
    secure: true, // –∏—Å–ø–æ–ª—å–∑—É–µ–º SSL
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
};

const submitApplication = async (req, res) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üîß Environment variables:');
    console.log('EMAIL_USER:', process.env.EMAIL_USER);
    console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? '***SET***' : 'NOT SET');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.error('‚ùå EMAIL_USER –∏–ª–∏ EMAIL_PASS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      return res.status(500).json({
        status: 'error',
        message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
      });
    }

    const {
      firstName,
      lastName,
      middleName,
      phone,
      email,
      birthDate,
      programId,
      preferredStartDate,
      additionalInfo
    } = req.body;

    // Validate required fields
    if (!firstName || !lastName || !phone || !email || !birthDate || !programId) {
      return res.status(400).json({
        status: 'error',
        message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
      });
    }

    // Get program details based on programId
    const programs = {
      1: { category: 'B', name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è B - –õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', cost: 35000 },
      2: { category: 'A', name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è A - –ú–æ—Ç–æ—Ü–∏–∫–ª—ã', cost: 25000 },
      3: { category: 'C', name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è C - –ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', cost: 45000 }
    };

    const selectedProgram = programs[programId];
    if (!selectedProgram) {
      return res.status(400).json({
        status: 'error',
        message: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è'
      });
    }

    // Format the email content
    const emailContent = `
      <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ</h2>
      
      <h3>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h3>
      <p><strong>–§–ò–û:</strong> ${lastName} ${firstName} ${middleName || ''}</p>
      <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> ${new Date(birthDate).toLocaleDateString('ru-RU')}</p>
      <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
      <p><strong>Email:</strong> ${email}</p>
      
      <h3>–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</h3>
      <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${selectedProgram.category}</p>
      <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${selectedProgram.name}</p>
      <p><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${selectedProgram.cost.toLocaleString('ru-RU')} ‚ÇΩ</p>
      
      ${preferredStartDate ? `<p><strong>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</strong> ${new Date(preferredStartDate).toLocaleDateString('ru-RU')}</p>` : ''}
      
      ${additionalInfo ? `<h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3><p>${additionalInfo}</p>` : ''}
      
      <hr>
      <p><em>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${new Date().toLocaleString('ru-RU')}</em></p>
    `;

    // Email options
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: 'amurklan@mail.ru',
      subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ - ${selectedProgram.category}`,
      html: emailContent
    };

    // –°–æ–∑–¥–∞–µ–º transporter –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const transporter = createTransporter();
    
    // Send email
    try {
      await transporter.sendMail(mailOptions);
      console.log('üìß Email sent successfully');
    } catch (emailError) {
      console.error('üìß Email sending error:', emailError);
      throw emailError;
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email
    console.log('üìß EMAIL SENT SUCCESSFULLY:');
    console.log('From:', process.env.EMAIL_USER);
    console.log('To: amurklan@mail.ru');
    console.log('Subject:', `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ - ${selectedProgram.category}`);

    // Log the application (in a real app, you'd save to database)
    console.log('Application submitted:', {
      applicant: `${lastName} ${firstName} ${middleName}`,
      program: selectedProgram.name,
      email: email,
      phone: phone,
      timestamp: new Date().toISOString()
    });

    res.json({
      status: 'success',
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      data: {
        applicantName: `${lastName} ${firstName}`,
        program: selectedProgram.name
      }
    });

  } catch (error) {
    console.error('Error submitting application:', error);
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'
    });
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
const testEmailConfig = async (req, res) => {
  try {
    console.log('üîß Testing email configuration:');
    console.log('EMAIL_USER:', process.env.EMAIL_USER);
    console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? '***SET***' : 'NOT SET');
    
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return res.status(400).json({
        status: 'error',
        message: 'EMAIL_USER –∏–ª–∏ EMAIL_PASS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
        emailUser: process.env.EMAIL_USER,
        emailPassSet: !!process.env.EMAIL_PASS
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP
    const testTransporter = createTransporter();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await testTransporter.verify();
    
    res.json({
      status: 'success',
      message: 'Email configuration is working',
      emailUser: process.env.EMAIL_USER,
      emailPassSet: !!process.env.EMAIL_PASS
    });
  } catch (error) {
    console.error('Email configuration test failed:', error);
    res.status(500).json({
      status: 'error',
      message: 'Email configuration test failed',
      error: error.message
    });
  }
};

export { submitApplication, testEmailConfig }; 
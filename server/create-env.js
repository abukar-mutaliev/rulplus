#!/usr/bin/env node

/**
 * üöÄ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ .env –¥–ª—è –†–£–õ–¨+
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function createEnvFile() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –¥–ª—è –†–£–õ–¨+\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ .env —Ñ–∞–π–ª
  const envPath = path.join(__dirname, '.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await askQuestion('–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      rl.close();
      return;
    }
  }

  console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL + Prisma –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('üèÜ PostgreSQL - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!');
  console.log('');
  console.log('üìã –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:');
  console.log('   ‚Ä¢ PostgreSQL —Å–µ—Ä–≤–µ—Ä (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ –æ–±–ª–∞—á–Ω—ã–π)');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö rulplus_db');
  console.log('   ‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü');
  console.log('');

  const pgHost = await askQuestion('–•–æ—Å—Ç PostgreSQL (localhost): ') || 'localhost';
  const pgPort = await askQuestion('–ü–æ—Ä—Ç PostgreSQL (5432): ') || '5432';
  const pgUser = await askQuestion('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ');
  const pgPass = await askQuestion('–ü–∞—Ä–æ–ª—å: ');
  const pgDb = await askQuestion('–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (rulplus_db): ') || 'rulplus_db';

  const databaseUrl = `postgresql://${pgUser}:${pgPass}@${pgHost}:${pgPort}/${pgDb}`;
  console.log('‚úÖ PostgreSQL URL —Å–æ–∑–¥–∞–Ω');

  // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞
  const envContent = `# Environment Configuration
NODE_ENV=development
PORT=5000

# Database Configuration
DATABASE_URL=${databaseUrl}

# JWT Configuration
JWT_SECRET=rulplus_super_secret_jwt_key_${Date.now()}
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# CORS Configuration
CORS_ORIGIN=http://localhost:3000,http://localhost:3001,http://localhost:3007,http://localhost:3008,http://localhost:3009,http://localhost:3010,http://localhost:3011,http://localhost:3012,http://localhost:3013,http://localhost:3014,http://localhost:3015

# File Upload Configuration
MAX_FILE_SIZE=10485760
UPLOAD_DESTINATION=./uploads

# Security Configuration
BCRYPT_SALT_ROUNDS=12
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=true
LOG_MAX_FILES=14d
LOG_MAX_SIZE=20m

# Email Configuration (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫)
EMAIL_USER=your-email@yandex.ru
EMAIL_PASS=your-app-password
EMAIL_HOST=smtp.yandex.ru
EMAIL_PORT=465
EMAIL_SECURE=true
EMAIL_FROM=noreply@rulplus.ru

# Redis Configuration (–¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=

# Admin Panel Access
ADMIN_PASSWORD=rulplus_admin_2024

# ============================================
# –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${new Date().toISOString()}
# ============================================
`;

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  try {
    fs.writeFileSync(envPath, envContent, 'utf8');
    console.log('\n‚úÖ –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log(`üìÅ –ü—É—Ç—å: ${envPath}`);
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:');
    console.log('npm run dev');

    if (choice === '3') {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏!');
      console.log('–î–∞–Ω–Ω—ã–µ –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
      console.log('–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ MongoDB Atlas –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é MongoDB.');
    }
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ .env:', error.message);
  }

  rl.close();
}

createEnvFile().catch(console.error);

const { config } = require('./index.js');
const { logger } = require('../utils/logger.js');

const connectDatabase = async () => {
  try {
    logger.info('üöÄ PostgreSQL + Prisma —Ä–µ–∂–∏–º');
    logger.info(`üìç Database URL: ${config.database.uri.replace(/:[^:]*@/, ':***@')}`);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL —á–µ—Ä–µ–∑ Prisma
    const { prisma } = require('./prisma.js');
    await prisma.$connect();
    logger.info('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Prisma!');

    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'));
      }, 15000); // –¢–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥

      const checkConnection = async () => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
          await prisma.$queryRaw`SELECT 1`;
          clearTimeout(timeout);
          logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
          resolve(true);
        } catch (error) {
          logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
          setTimeout(checkConnection, 1000);
        }
      };

      checkConnection();
    });

    // Graceful shutdown
    process.on('SIGINT', async () => {
      logger.info('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      const { prisma } = await import('./prisma.js');
      await prisma.$disconnect();
      logger.info('üì¥ PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      process.exit(0);
    });

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error);
    process.exit(1);
  }
};

module.exports = { connectDatabase }; 
import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { DocumentService } from '../services/document.service.prisma.js';

console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL + Prisma —Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');

const router = express.Router();

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const documentsDir = path.join(process.cwd(), 'uploads', 'documents');
if (!fs.existsSync(documentsDir)) {
  fs.mkdirSync(documentsDir, { recursive: true });
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, documentsDir);
  },
  filename: (req, file, cb) => {
    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const timestamp = Date.now();
    const ext = path.extname(file.originalname);
    const name = path.basename(file.originalname, ext)
      .replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø]/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
      .replace(/_+/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
      .replace(/^_|_$/g, ''); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    const safeFileName = `${name}_${timestamp}${ext}`;
    cb(null, safeFileName);
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –º–∞–∫—Å–∏–º—É–º
  },
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt'];
    const ext = path.extname(file.originalname).toLowerCase();

    if (allowedTypes.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF, DOC, DOCX, TXT'));
    }
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
router.get('/', async (req, res) => {
  try {
    const result = await DocumentService.getAllDocuments();
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.get('/category/:category', async (req, res) => {
  try {
    const { category } = req.params;
    const result = await DocumentService.getDocumentsByCategory(category);
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üåê GET /api/documents/:id:', id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ ID —Ç–æ—á–∫–∏ –∏–ª–∏ —Å–ª–µ—à–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å fileName)
    if (id.includes('.') || id.includes('/')) {
      console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å —Å fileName –≤–º–µ—Å—Ç–æ ID:', id);

      try {
        // –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ fileName –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { prisma } = await import('../config/prisma.js');
        const document = await prisma.document.findFirst({
          where: { fileName: id }
        });

        if (document) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å fileName:', document.id);

          // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç
          const redirectUrl = `/api/documents/${document.id}`;
          console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', redirectUrl);
          return res.redirect(302, redirectUrl);
        } else {
          console.log('‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å fileName –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
          return res.status(404).json({
            status: 'error',
            message: '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
          });
        }
      } catch (searchError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', searchError);
        return res.status(500).json({
          status: 'error',
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        });
      }
    }

    const result = await DocumentService.getDocumentById(id);
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', result.data.title);
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    console.error('üìã –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π ID –±—ã–ª:', req.params.id);

    if (error.message === '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω') {
      return res.status(404).json({
        status: 'error',
        message: error.message
      });
    }
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      error: error.message
    });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
router.post('/', upload.single('file'), async (req, res) => {
  try {
    const { title, description, category, status, expiryDate } = req.body;

    if (!title || !description || !category) {
      return res.status(400).json({
        status: 'error',
        message: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è: title, description, category'
      });
    }

    const documentData = {
      title,
      description,
      category,
      status: status || 'active',
      expiryDate: expiryDate ? new Date(expiryDate) : undefined
    };

    // –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
    if (req.file) {
      documentData.fileUrl = `/documents/${req.file.filename}`;
      documentData.fileName = req.file.filename;
      documentData.fileSize = `${(req.file.size / 1024 / 1024).toFixed(1)} –ú–ë`;
    }

    const result = await DocumentService.createDocument(documentData);

    console.log(`üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${title} (${category})`);
    console.log(`üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:`, result.data?.id);

    res.status(201).json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);

    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
router.put('/:id', upload.single('file'), async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, category, status, expiryDate } = req.body;

    console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:');
    console.log('üìã ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', id);
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { title, description, category, status, expiryDate });

    const documentData = {};

    if (title !== undefined) documentData.title = title;
    if (description !== undefined) documentData.description = description;
    if (category !== undefined) documentData.category = category;
    if (status !== undefined) documentData.status = status;
    if (expiryDate !== undefined) documentData.expiryDate = expiryDate ? new Date(expiryDate) : null;

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    if (req.file) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
      const oldDocument = await DocumentService.getDocumentById(id);
      if (oldDocument.data.fileName) {
        const oldFilePath = path.join(documentsDir, oldDocument.data.fileName);
        if (fs.existsSync(oldFilePath)) {
          fs.unlinkSync(oldFilePath);
          console.log(`üóëÔ∏è –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${oldDocument.data.fileName}`);
        }
      }

      documentData.fileUrl = `/documents/${req.file.filename}`;
      documentData.fileName = req.file.filename;
      documentData.fileSize = `${(req.file.size / 1024 / 1024).toFixed(1)} –ú–ë`;
    }

    const result = await DocumentService.updateDocument(id, documentData);

    console.log(`üìù –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${result.data.title}`);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ID: ${result.data.id}`);
    console.log(`üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª: ${documentData.fileName || '—Ñ–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–µ–Ω'}`);

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);

    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }

    if (error.message === '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω') {
      return res.status(404).json({
        status: 'error',
        message: error.message
      });
    }

    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      error: error.message
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üóëÔ∏è DELETE /api/documents/:id');
    console.log('üìã ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', id);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const document = await DocumentService.getDocumentById(id);

    const result = await DocumentService.deleteDocument(id);

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (document.data.fileName) {
      const filePath = path.join(documentsDir, document.data.fileName);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${document.data.fileName}`);
      }
    }

    console.log(`üóëÔ∏è –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω: ${result.data.title}`);

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);

    if (error.message === '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω') {
      return res.status(404).json({
        status: 'error',
        message: error.message
      });
    }

    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      error: error.message
    });
  }
});

// –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
router.get('/search/:query', async (req, res) => {
  try {
    const { query } = req.params;
    const result = await DocumentService.searchDocuments(query);
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
router.get('/stats/overview', async (req, res) => {
  try {
    const result = await DocumentService.getDocumentStats();
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      error: error.message
    });
  }
});

export default router;

// Prisma schema for RULPLUS Driving School
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель документа
model Document {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  status      String   @default("active")
  uploadDate  DateTime @default(now())
  lastUpdate  DateTime @updatedAt
  expiryDate  DateTime?
  fileUrl     String?
  fileName    String?
  fileSize    String?

  @@map("documents")
}

// Основная информация об организации
model BasicInfo {
  id              String   @id @default(cuid())
  fullName        String
  shortName       String
  brandName       String?
  slogan          String?
  foundedDate     String
  legalAddress    String
  actualAddress   String
  phone           String
  email           String
  founderName     String
  founderAddress  String
  founderPhone    String
  founderEmail    String
  founderWebsite  String
  workSchedule    Json
  branches        Json
  description     String?
  mission         String?
  values          Json?
  lastUpdated     DateTime @updatedAt
  updatedBy       String?

  @@map("basic_info")
}

// Пользователи системы
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("client") // admin, employee, supplier, driver, client
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  profile   UserProfile?

  @@map("users")
}

// Профиль пользователя
model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  middleName  String?
  phone       String?
  birthDate   DateTime?

  // Для сотрудников
  position    String?
  department  String?

  // Адреса
  districts   Json? // Массив районов

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Склады
model Warehouse {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  district    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  products    ProductStock[]

  @@map("warehouses")
}

// Товары/услуги
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  weight      Float?
  category    String
  supplierId  String?
  images      Json? // Массив URL изображений
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  supplier    Supplier?     @relation(fields: [supplierId], references: [id])
  stock       ProductStock[]

  @@map("products")
}

// Поставщики
model Supplier {
  id          String   @id @default(cuid())
  name        String
  contact     String?
  phone       String?
  email       String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  products    Product[]

  @@map("suppliers")
}

// Остатки товаров на складах
model ProductStock {
  id          String   @id @default(cuid())
  productId   String
  warehouseId String
  quantity    Int      @default(0)
  minStock    Int      @default(0)
  updatedAt   DateTime @updatedAt

  // Связи
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
  @@map("product_stock")
}

// Заказы
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  clientId    String?
  status      String      @default("pending")
  totalAmount Float
  items       Json // Массив товаров в заказе
  deliveryAddress String?
  contactPhone String?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

// Корзина пользователя
model Cart {
  id        String   @id @default(cuid())
  userId    String?  @unique // null для неавторизованных пользователей
  sessionId String?  @unique // для гостей
  items     Json // Массив товаров в корзине
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

// Логи действий
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entityType  String
  entityId    String
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@map("activity_logs")
}
